apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven"
apply from:'file:emma.gradle'

project.ext {
    springVersion = "4.0.0.RELEASE"
    springDataMongoVersion = "1.3.3.RELEASE"
    springSecurityVersion = "3.2.0.RELEASE"
    queryDslVersion = "3.3.0"
    junitVersion = "4.10"
    mockitoVersion = "1.9.5"
    queryPredicateSrcDir = 'src/generated/java'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = "org.springframework.security"
version = "3.2.0.RELEASE"

repositories {
    mavenCentral()
}

dependencies {
    compile "javax.inject:javax.inject:1"
    compile "org.springframework.data:spring-data-mongodb:$springDataMongoVersion"
    compile "org.springframework.security:spring-security-acl:$springSecurityVersion"
    compile "com.mysema.querydsl:querydsl-apt:$queryDslVersion"
    compile ("com.mysema.querydsl:querydsl-mongodb:$queryDslVersion") {
        exclude module: 'morphia'
    }
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "de.flapdoodle.embedmongo:de.flapdoodle.embedmongo:1.18"
    testCompile "net.sf.ehcache:ehcache:1.5.0"
    testCompile "com.google.guava:guava:14.0.1"
    emma "emma:emma:2.1.5320"
    emma "emma:emma_ant:2.1.5320"
}

sourceSets {
    main  {
        java {
            srcDirs queryPredicateSrcDir
        }
    }
}

task generateQueryPredicateClasses << {
    File dest = new File(project.projectDir, queryPredicateSrcDir)
    dest.mkdirs();
    compilerArgs = [
        '-proc:only', '--stacktrace',
        '-processor', 'org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor',
        '-s', dest.absolutePath
    ]
    Map otherArgs = [
        includeAntRuntime: false,
        classpath: configurations.compile.asPath,
        sourcepath: '',
        target: targetCompatibility,
        source: sourceCompatibility
    ]
    ant.javac(otherArgs){
        sourceSets.main.allJava.addToAntBuilder(ant, 'src', FileCollection.AntType.MatchingTask)
        compilerArgs.each { value ->
            compilerarg(value: value)
        }
    }
}
task cleanQueryPredicateClass(type: Delete) {
    delete new File(project.projectDir, 'src/generated')
}

clean.dependsOn(cleanQueryPredicateClass)
compileJava.dependsOn(generateQueryPredicateClasses)
